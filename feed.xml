<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason Writes Code</title>
    <description>My everyday struggles with the web</description>
    <link>http://jasonsavage.github.io/</link>
    <atom:link href="http://jasonsavage.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 23 Oct 2015 11:49:07 -0400</pubDate>
    <lastBuildDate>Fri, 23 Oct 2015 11:49:07 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Moved My Blog To GitHub Using Jekyll And Prism</title>
        <description>&lt;p&gt;A few days ago I decided that &lt;a href=&quot;https://www.blogger.com&quot;&gt;Blogger&lt;/a&gt; is just too hard to work with. It takes me so long to write a blog post that I either end up pasting a bunch of code into a post and calling it complete or not writing them. This frustration led me to start exploring what other people are using for their blogs.&lt;/p&gt;

&lt;p&gt;I’ve used &lt;a href=&quot;https://wordpress.com/&quot;&gt;Wordpress&lt;/a&gt; before and on many hosting site it can be installed with a click of a button. That’s great and there are tons of themes out there, but when you get into it, I still find it hard to customize a theme. For one thing, there’s about a thousand PHP files to look through and edit after you install a theme.&lt;/p&gt;

&lt;p&gt;This led me to &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; which looks awesome and easy to use, plus their hosting plan will take care of any setup needed. Ghost is a &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs&lt;/a&gt; based site which it promotes as making it lightning fast compared to other platforms. Unfortunately, a lot of basic web hosts don’t support nodejs sites, so if you decide to use your own web host you might run into some issues. I ended up not using Ghost because it’s not free. :)&lt;/p&gt;

&lt;p&gt;Finally, I came across &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. The difference with Jekyll is that it’s not really a blog site or platform like WordPress or Ghost, but a site generator. What is also neat is that it doesn’t use a database.&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-write-posts&quot;&gt;How do you write posts?&lt;/h3&gt;
&lt;p&gt;Since Jekyll is a site generator, you are free to build or download whatever html template you want. After you have your html code, you can start slicing it up and adding &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;liquid markup&lt;/a&gt; where ever you want your dynamic content to go. For all your posts, they go in the _posts folder (drafts go in the _drafts folder) and can be written using &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt;. More on directory structure can be found here: &lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;jekyllrb.com/docs/structure&lt;/a&gt;. Then when you run &lt;strong&gt;jekyll build&lt;/strong&gt; from the command line, your static blog site is generated and put into the _site folder.&lt;/p&gt;

&lt;p&gt;I can’t tell you how much nicer it is to be able to write your posts using markdown. The command &lt;strong&gt;jekyll server&lt;/strong&gt; with actually spin up a quick node server so you can preview your website at http://localhost:4000/ and it even watches for changes allowing you to edit the markdown, and instantly view the compiled output in your browser.&lt;/p&gt;

&lt;p&gt;There are Jekyll themes out there and I ended up using one called &lt;a href=&quot;http://jekyllthemes.org/themes/twenty/&quot;&gt;Twenty by HTML5 UP&lt;/a&gt; from &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt; as a base layout for my blog. Downloading and looking at the template, I was able to easily tweak everything as I wanted because it’s just html. As for the formatting of my code samples, I’m using &lt;a href=&quot;http://prismjs.com/&quot;&gt;Prismjs&lt;/a&gt; which I discovered while viewing other popular blog sites. It is quite a step up from &lt;a href=&quot;http://alexgorbatchev.com/SyntaxHighlighter&quot;&gt;Syntax Highlighter&lt;/a&gt; that I was using on Blogger.&lt;/p&gt;

&lt;h3 id=&quot;hosting-of-github&quot;&gt;Hosting of GitHub&lt;/h3&gt;
&lt;p&gt;Maybe I’m late to the table on this but GitHub allows you to host your site from a public GitHub repository. Just create a new repo named username.github.io, where username is your username (or organization name) on GitHub. After that clone the repo to your computer, copy all your files that Jekyll has copied to the _site folder, run &lt;strong&gt;git push&lt;/strong&gt; and your site is live.&lt;/p&gt;

&lt;h3 id=&quot;any-code-examples&quot;&gt;Any code examples?&lt;/h3&gt;
&lt;p&gt;With all this I did have to figure out one thing and good old &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;stackoverflow&lt;/a&gt; came to the rescue. The template I downloaded was for a whole site, but right now I only have a blog so I cut out everything but the blog page and made that my index.html page. The template was setup to display all blog entries with an excerpt and a read more link. This wasn’t going to work, I only wanted my most recent blog entry featured with navigation to all my other entries in a side bar. Being really new to Jekyll and the Liquid templating markup, I had no idea where to start.&lt;/p&gt;

&lt;p&gt;Thankfully, someone had already figured this out: 
&lt;a href=&quot;http://stackoverflow.com/questions/19086284/jekyll-liquid-templating-how-to-group-blog-posts-by-year&quot;&gt;stackoverflow.com/questions/19086284/jekyll-liquid-templating-how-to-group-blog-posts-by-year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the code I ended up using from that post, and it worked quite nicely.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#123;% for post in site.posts  %&amp;#125;
    &amp;#123;% capture this_year %&amp;#125;&amp;#123;&amp;#123; post.date | date: &amp;quot;%Y&amp;quot; &amp;#125;&amp;#125;&amp;#123;% endcapture %&amp;#125;
    &amp;#123;% capture this_month %&amp;#125;&amp;#123;&amp;#123; post.date | date: &amp;quot;%B&amp;quot; &amp;#125;&amp;#125;&amp;#123;% endcapture %&amp;#125;
    &amp;#123;% capture next_year %&amp;#125;&amp;#123;&amp;#123; post.previous.date | date: &amp;quot;%Y&amp;quot; &amp;#125;&amp;#125;&amp;#123;% endcapture %&amp;#125;
    &amp;#123;% capture next_month %&amp;#125;&amp;#123;&amp;#123; post.previous.date | date: &amp;quot;%B&amp;quot; &amp;#125;&amp;#125;&amp;#123;% endcapture %&amp;#125;

    &amp;#123;% if forloop.first %&amp;#125;
    &amp;lt;h2 id=&amp;quot;&amp;#123;&amp;#123; this_year &amp;#125;&amp;#125;-ref&amp;quot;&amp;gt;&amp;#123;&amp;#123;this_year&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h3 id=&amp;quot;&amp;#123;&amp;#123; this_year &amp;#125;&amp;#125;-&amp;#123;&amp;#123; this_month &amp;#125;&amp;#125;-ref&amp;quot;&amp;gt;&amp;#123;&amp;#123; this_month &amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;
    &amp;lt;ul&amp;gt;
    &amp;#123;% endif %&amp;#125;

    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#123;&amp;#123; post.url &amp;#125;&amp;#125;&amp;quot;&amp;gt;&amp;#123;&amp;#123; post.title &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

    &amp;#123;% if forloop.last %&amp;#125;
    &amp;lt;/ul&amp;gt;
    &amp;#123;% else %&amp;#125;
        &amp;#123;% if this_year != next_year %&amp;#125;
        &amp;lt;/ul&amp;gt;
        &amp;lt;h2 id=&amp;quot;&amp;#123;&amp;#123; next_year &amp;#125;&amp;#125;-ref&amp;quot;&amp;gt;&amp;#123;&amp;#123;next_year&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
        &amp;lt;h3 id=&amp;quot;&amp;#123;&amp;#123; next_year &amp;#125;&amp;#125;-&amp;#123;&amp;#123; next_month &amp;#125;&amp;#125;-ref&amp;quot;&amp;gt;&amp;#123;&amp;#123; next_month &amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;
        &amp;lt;ul&amp;gt;
        &amp;#123;% else %&amp;#125;
            &amp;#123;% if this_month != next_month %&amp;#125;
            &amp;lt;/ul&amp;gt;
            &amp;lt;h3 id=&amp;quot;&amp;#123;&amp;#123; this_year &amp;#125;&amp;#125;-&amp;#123;&amp;#123; next_month &amp;#125;&amp;#125;-ref&amp;quot;&amp;gt;&amp;#123;&amp;#123; next_month &amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;
            &amp;lt;ul&amp;gt;
            &amp;#123;% endif %&amp;#125;
        &amp;#123;% endif %&amp;#125;
    &amp;#123;% endif %&amp;#125;
&amp;#123;% endfor %&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/moved-my-blog-to-github-using-jekyll-and-prism.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/moved-my-blog-to-github-using-jekyll-and-prism.html</guid>
        
        
      </item>
    
      <item>
        <title>Tips for building AngularJS forms with validation</title>
        <description>&lt;p&gt;In this article we will be using &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS 1.3.15&lt;/a&gt;, because that’s what version the project I’m currently working on uses. Keep in mind, this stuff changes all the time but, for now, this seems to be the “correct” way.&lt;/p&gt;

&lt;p&gt;You’ve probably been using AngularJS for a while now, you also know how forms work, and you probably have forms in you’re AngularJS project that are collecting data and everything is working fine. So why do you still need help with forms? That’s where I was at a few days ago. I’ve been building forms with a basic understanding of &lt;a href=&quot;https://code.angularjs.org/1.3.16/docs/api/ng/directive/ngModel&quot;&gt;ng-model&lt;/a&gt; and &lt;a href=&quot;https://code.angularjs.org/1.3.16/docs/api/ng/type/form.FormController&quot;&gt;FormController&lt;/a&gt;, and they work, but I’ve been writing a lot of extra JavaScript to do it.&lt;/p&gt;

&lt;p&gt;A developer on my team, figured out a better way to do a lot of the validation using AngularJS and it’s was so simple. It was right here the whole time: &lt;a href=&quot;https://code.angularjs.org/1.3.16/docs/guide/forms&quot;&gt;code.angularjs.org/1.3.16/docs/guide/forms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, let’s put a contact us form together using &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;angular.module(&quot;mainApp&quot;)
    .controller(&quot;ContactCtrl&quot;, function ($scope, $log) {
        &quot;use strict&quot;;
});&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form-horizontal&amp;quot; name=&amp;quot;contactForm&amp;quot; novalidate&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting with a basic controller and a form template. We already have a ton of stuff setup here thanks to AngularJS. AngularJS adds &lt;a href=&quot;https://code.angularjs.org/1.3.16/docs/api/ng/directive/ngForm&quot;&gt;ng-form&lt;/a&gt; code to all &amp;lt;form&amp;gt; and &amp;lt;ng-form&amp;gt; tags that sets up a property on the $scope that matches the name you gave the form. In this example, even though we didn’t create it, we can now access $scope.contactForm which is an instance of FormController.&lt;/p&gt;

&lt;p&gt;For the HTML template, I’m going to copy the code from the link &lt;a href=&quot;https://code.angularjs.org/1.3.16/docs/guide/forms&quot;&gt;code.angularjs.org/1.3.16/docs/guide/forms&lt;/a&gt; to setup a name and email field in our form. Before we use it though, let’s update the code to match what &lt;a href=&quot;http://getbootstrap.com/css/#forms-horizontal&quot;&gt;Bootstrap&lt;/a&gt; has for the basic HTML structure for a horizontal form using their CSS classes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form-horizontal&amp;quot; name=&amp;quot;contactForm&amp;quot;&amp;gt;

    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;inputName&amp;quot; class=&amp;quot;col-sm-2 control-label&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
        &amp;lt;div class=&amp;quot;col-sm-10&amp;quot;&amp;gt;
            
            &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inputName&amp;quot; name=&amp;quot;uName&amp;quot;
                   class=&amp;quot;form-control&amp;quot;
                   placeholder=&amp;quot;Enter your name&amp;quot;
                   ng-model=&amp;quot;user.name&amp;quot;
                   required /&amp;gt;
            
            &amp;lt;div ng-show=&amp;quot;contactForm.$submitted || contactForm.uName.$touched&amp;quot;&amp;gt;
                &amp;lt;span ng-show=&amp;quot;contactForm.uName.$error.required&amp;quot;&amp;gt;
                    Tell us your name.&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;inputEmail&amp;quot; class=&amp;quot;col-sm-2 control-label&amp;quot;&amp;gt;E-mail:&amp;lt;/label&amp;gt;
        &amp;lt;div class=&amp;quot;col-sm-10&amp;quot;&amp;gt;
            
            &amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;inputEmail&amp;quot; name=&amp;quot;uEmail&amp;quot;
                   class=&amp;quot;form-control&amp;quot;
                   placeholder=&amp;quot;E-mail&amp;quot;
                   ng-model=&amp;quot;user.email&amp;quot;
                   required /&amp;gt;
            
            &amp;lt;div ng-show=&amp;quot;contactForm.$submitted || contactForm.uEmail.$touched&amp;quot;&amp;gt;
                &amp;lt;span ng-show=&amp;quot;contactForm.uEmail.$error.required&amp;quot;&amp;gt;
                    Tell us your email.&amp;lt;/span&amp;gt;
                &amp;lt;span ng-show=&amp;quot;contactForm.uEmail.$error.email&amp;quot;&amp;gt;
                    This is not a valid email.&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-sm-offset-2 col-sm-10&amp;quot;&amp;gt;
            
            &amp;lt;button type=&amp;quot;button&amp;quot; 
                    class=&amp;quot;btn btn-default&amp;quot; 
                    ng-click=&amp;quot;reset()&amp;quot;&amp;gt;Reset&amp;lt;/button&amp;gt;
            
            &amp;lt;button type=&amp;quot;submit&amp;quot; 
                    class=&amp;quot;btn btn-primary&amp;quot; 
                    ng-click=&amp;quot;save()&amp;quot; 
                    ng-disabled=&amp;quot;contactForm.$invalid&amp;quot;&amp;gt;Save&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-name-attribute&quot;&gt;The name attribute&lt;/h3&gt;

&lt;p&gt;The thing to look at is that on each input we have added a &lt;strong&gt;name&lt;/strong&gt; attribute. This is what I was missing when I first tried to setup forms using validation in this way. Adding the name “uName” will in turn add that property to the parent formController instance “contactForm”.&lt;/p&gt;

&lt;p&gt;Now, that element’s ng-model scope can be accessed via $scope.contactForm.uName. This is big because then we can easily add validation messages like &lt;strong&gt;ng-show=”contactForm.uEmail.$error.required&lt;/strong&gt;” in a list under each form input.&lt;/p&gt;

&lt;h3 id=&quot;touched&quot;&gt;$touched&lt;/h3&gt;

&lt;p&gt;Another thing I overlooked was the wrapping div around the validation messages. With out it, as soon as the form loads, we see the required error message and the input it outlined in red. I thought this was an issue with AngularJS and spent a lot of time getting around it, but actually I just need to use the &lt;strong&gt;$touched&lt;/strong&gt; property. This will cause the input not to be shown as invalid until the user causes a blur event on the field.&lt;/p&gt;

&lt;h3 id=&quot;submitted&quot;&gt;$submitted&lt;/h3&gt;

&lt;p&gt;The last thing I want to point out is the &lt;strong&gt;contactForm.$submitted&lt;/strong&gt; property. Since AngularJS converts all form tags to ng-form, they no longer submit to the server by default when you mark a button as &lt;strong&gt;type=”submit”&lt;/strong&gt;. What happens is that this property on formController is set to true, which allows us another chance to show any validation errors in the form.&lt;/p&gt;

&lt;p&gt;Let’s do a little work on our controller now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;angular.module(&quot;mainApp&quot;)
    .controller(&quot;ContactCtrl&quot;, function ($scope, $log, userService) {
        &quot;use strict&quot;;

    //we need to create a new user to hold our form data. 
    $scope.user = userService.createUser();

    //we&#39;ll assume that userService.createUser() returns an object like this:
    //{ name : &quot;&quot;, email : &quot;&quot; };

    $scope.reset = function () {
        //here we can just do a simple call to create a new user again
        $scope.user = userService.createUser();
    };

    $scope.save = function () {
        //we can use our formController to do a simple check to see if the form is valid
        if( $scope.contactForm.$valid ) {
            //all fields are valid, so submit to server.
            userService.save( $scope.user );
        }
    };
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we can let AngularJS do most of the work with forms and validation. No more if/else statements like this to check all the custom validation on your form elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$scope.save = function () {
    if($scope.user.name.length === 0) {
         $scope.userNameError = &quot;Name is Required!&quot;;
    } else if($scope.user.email.length &amp;gt; 0) {
         $scope.userEmailError = &quot;Email is Required!&quot;;
    } else if(! isEmail($scope.user.email) ) {
         $scope.userEmailError = &quot;This is not a valid email.&quot;;
    } else {
         //form is valid
         userService.save( $scope.user );
    }
};
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 25 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/tips-for-building-angularjs-forms-with-validation.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/tips-for-building-angularjs-forms-with-validation.html</guid>
        
        
      </item>
    
      <item>
        <title>HTML5 Canvas Drawing and Animation 101 (no frameworks!)</title>
        <description>&lt;div class=&quot;txt-c&quot;&gt;&lt;img src=&quot;/assets/images/network_animation_screen.jpg&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;The other day I had some downtime and decided to mess around with drawing and animating with the canvas tag. As far as I can tell, unless your building a game or some 3D interactive thing on the web, you probably should opt for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;svg&lt;/a&gt; vector drawing and/or animation since they are way simpler.&lt;/p&gt;

&lt;p&gt;For drawing with the canvas element, I recommend one of these great frameworks to ease development: &lt;a href=&quot;http://www.createjs.com/EaselJS&quot;&gt;EaselJS&lt;/a&gt; and &lt;a href=&quot;http://threejs.org/&quot;&gt;Three.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this experiment, I thought I’d just write vanilla JavaScript since I was just messing around and didn’t want to spend a lot of time reading documentation. After a few hours, I end up with a neat little network of dots animation.&lt;/p&gt;

&lt;h3 id=&quot;the-canvas-tag&quot;&gt;The canvas tag&lt;/h3&gt;
&lt;p&gt;First off, we need some JavaScript to add the canvas tag to the page. You can always just write the &amp;lt;canvas /&amp;gt; tag in the body of the page and give it an id, so whichever you prefer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var canvas = document.createElement(&#39;canvas&#39;);
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
document.body.appendChild(canvas);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;requestanimationframe&quot;&gt;requestAnimationFrame()&lt;/h3&gt;
&lt;p&gt;Now for the heart of our application, the looper function. This is the function that will repeat over and over again and draw each frame of our animation, just like the frames of a movie. For this, it is recommended that we use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;requestAnimationFrame() method&lt;/a&gt; in JavaScript instead of setInterval() since it is geared towards animating elements on the screen and will perform better/smoother. Plus, if the tab or window is inactive, the animation stops which is better for the computer’s CPU.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var startTime = new Date().getTime(),
    lastTime = 0;

//start looping
requestAnimationFrame( looper );

function looper() {
    requestAnimationFrame( looper );

    //calculate current frame time and delta time
    //delta time - elapsed time since the last call to the looper method
    var now = new Date().getTime() - startTime,
        delta = (now - lastTime)/1000;

    //get the 2d context object
    var ctx = canvas.getContext(&#39;2d&#39;);

    //clear all graphics from the canvas
    ctx.clearRect(0 , 0 , canvas.width , canvas.height);

    //update game physics (animations)
    update( delta );

    //render everything back to the canvas
    draw( ctx );
    
    //save the current time for next loop
    lastTime = now;
}

//these 2 methods will be finished below
function update(delta) { }

function draw(ctx) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above, I ended up not using delta time in my experiment, but if you are building a serious app or game be sure to take a look at some blog post about it: &lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;Fix Your Timestep&lt;/a&gt;. There is also quite a bit more code you’ll need to make sure your game runs at a constant speed no matter what computer or browser it’s running on.&lt;/p&gt;

&lt;h3 id=&quot;the-network-of-dots&quot;&gt;The network of dots&lt;/h3&gt;

&lt;p&gt;Now to talk about what we are drawing/animating. In the picture above we have an array of orange circles (nodes) and a bunch of green lines (links) that are chasing each other around the screen. When one node catches it’s target the link is broken and the node stops moving. In the code I represent each orange circle as a node agent. An agent is basically just an object that keeps track of the current values for one of the circles on the screen. This way, our draw function ends up being rather simple. Just loop over all node agents in the array and draw them on the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//create network of nodes
var nodesArray = createNodes(200, canvas);

//This method will create an array of node agents to 
//be drawn on the screen
function createNodes(size, canvas) {
    var nodes = [];

    for(var i = 0; i &amp;lt; size; i++ ){
        //Here we create an agent at a random x, y position
        //with a random radius that is between 5px and 25px
        nodes.push(
            createNodeAgent(
                Math.random() * canvas.width,
                Math.random() * canvas.height,
                5 + (Math.random() * 20)
            )
        );
    }
    return nodes;
}
//This is a factory function that return a new node agent object
function createNodeAgent(x, y, r) {
    return {
        x : x,
        y : y,
        radius : r,
        //Here we give it the orange color and set the alpha
        //based on this agent&#39;s size (bigger means more opaque)
        color : &quot;rgba(161,96,9,&quot; + r/30 + &quot;)&quot;,
        link : -1
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With our array of nodes we can finish writing the draw method which will fill our canvas with a background color and draw each node agent on the screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function draw(ctx) {
    //fill screen with black background
    ctx.fillStyle = &#39;black&#39;;
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    //draw all nodes
    nodesArray.forEach(function (agent) {
        drawNode(ctx, agent);
    });
}
function drawNode(ctx, agent) {
    ctx.beginPath();
    ctx.arc(agent.x, agent.y, agent.radius, 0, 2 * Math.PI, false);
    ctx.fillStyle = agent.color;
    ctx.fill();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you should be able to run the app and see all the circles on the screen. Every time you refresh the screen they are placed at random spots on the screen which nice, but having motion would be alot better. Lets finish the update method and make this happen.&lt;/p&gt;

&lt;p&gt;One thing we need to do first though is figure out how to get the nodes to chase a target node. For this we will use one of the properties we added above to each node called “link”. Link is going to be the index of another node in our master array. We could just pick one at random from the master array, but after a few test, it looked much nicer when nodes that are closest to each other are linked together. You end up with more of a networking effect this way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//connect all nodes to the target node that it is closest to.
linkNodes(nodesArray);

function linkNodes(nodes) {
    nodes.forEach(function (agent, idx) {
        //check how far all other agents are from this agent
        var dists = nodes.map(function (agentToCheck, i) {
            return Math.abs(agent.x - agentToCheck.x) + Math.abs(agent.y - agentToCheck.y);
        });

        //find the next closest agent thats not already linked
        var closest = 0,
            dist = 99999;

        dists.forEach(function (distance, i) {
            if(distance &amp;lt; dist &amp;amp;&amp;amp; nodes[i] !== agent &amp;amp;&amp;amp; nodes[i].link === -1) {
                dist = distance;
                closest = i;
            }
        });
        agent.link = closest;
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll admit, this method isn’t pretty and there is probably a better way to do this, but it works for this example.&lt;/p&gt;

&lt;p&gt;With this method, we have iterated through each node and gave it a target node to chase. Now we can finish the update method. The update method will slowly step each node towards it’s target until it gets within a certain distance. When is distance is reached, the node will clear the link and stop moving.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function update(delta) {

    //nodes move towards the agent its connected to
    nodesArray.forEach(function (agent) {
        //if this agent still has a target, update position
        if(agent.link !== -1) {
            //find target node in master array
            var targetAgent = nodesArray[agent.link];
            
            //step this agent towards the target agent using
            //a simple easing function
            agent.x = chase(agent.x, targetAgent.x, 100);
            agent.y = chase(agent.y, targetAgent.y, 100);
            
            //check to see if we are next the our target node
            var distX = Math.abs(agent.x-targetAgent.x),
                distY = Math.abs(agent.y-targetAgent.y),
                min = (agent.radius + targetAgent.radius);

            //if we are then clear link and stop moving
            if(distX &amp;lt; min &amp;amp;&amp;amp; distY &amp;lt; min){
                agent.link = -1;
            }
        }
    });
}
function chase(current, target, constant) {
    var change = (target - current) / constant;
    return current + change;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting better! So when you run your app, you should see all the dot slowly chasing there targets around the screen. You can add all kinds of cool math here and see what happens, also if you haven’t noticed, what we have here is the start of a basic &lt;a href=&quot;http://natureofcode.com/book/chapter-4-particle-systems/&quot;&gt;Particle System&lt;/a&gt;. From here we can start looking into velocity and force and all kinds of neat things. But, in the spirit of not re-inventing the wheel, we should probably defer to a fully tested framework for more advanced topics.&lt;/p&gt;

&lt;p&gt;Before I finish, you might be wondering where all the lines in the image at the top are. Lets revise our update method and add a function to draw the lines between each linked agent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function draw(ctx) {
    //fill screen with black background
    ctx.fillStyle = &#39;black&#39;;
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    //first pass, draw all links
    nodesArray.forEach(function (agent) {
        if(agent.link !== -1) {
            var linkedAgent = nodes[agent.link];
            drawLink(ctx, agent, linkedAgent);
        }
    });

    //second pass, draw all nodes
    nodesArray.forEach(function (agent) {
        drawNode(ctx, agent);
    });
}

function drawLink(ctx, agent, linkedAgent) {
   ctx.beginPath();
   ctx.moveTo(agent.x, agent.y);
   ctx.lineTo(linkedAgent.x, linkedAgent.y);

   //line style
   ctx.lineWidth = 5;
   ctx.lineCap = &#39;round&#39;;
   ctx.strokeStyle = &#39;rgba(161,174,20,0.5)&#39;;

   //draw
   ctx.stroke();

   //cleanup
   ctx.lineWidth = 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/html5-canvas-drawing-and-animation-101.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/html5-canvas-drawing-and-animation-101.html</guid>
        
        
      </item>
    
      <item>
        <title>Instead of ng-include, try an AngularJS directive</title>
        <description>&lt;p&gt;Recently, I came across a lot of code in an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; project I’m working on that uses ng-include. Up to now, haven’t really used ng-include in Angular very much. Instead, whenever I need to reuse a chunk of HTML, I just use create a custom AngularJS directive. Looking back at how I’ve been using directives, a ng-include might have been a better choice in some places.&lt;/p&gt;

&lt;p&gt;With that being said, I still think that in most situations, you are better off splitting up functionality into directives. Many of the places in the current Angular project I’m working on where ng-include is being used, a directive would have been a much better choice. So how to know when to use one or the other? One big red flag is if you are thinking of using the ng-init, ng-controller attributes. These have their uses, but, I believe should be avoided when building your application.&lt;/p&gt;

&lt;h3 id=&quot;ng-include-example&quot;&gt;ng-include example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- app/views/properties.html --&amp;gt;
&amp;lt;div class=&amp;quot;properties&amp;quot; ng-controller=&amp;quot;propertiesCtrl&amp;quot;&amp;gt;
    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;form-group&amp;quot; 
             ng-repeat=&amp;quot;key in currentElement.props&amp;quot; 
             ng-include=&amp;quot;&amp;#39;app/views/properties/main.html&amp;#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- app/views/properties/main.html --&amp;gt;
&amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot;&amp;gt;
    &amp;#123;&amp;#123;key | capitalize&amp;#125;&amp;#125; :
&amp;lt;/label&amp;gt;
&amp;lt;div class=&amp;quot;col-md-7&amp;quot;
     ng-include=&amp;quot;&amp;#39;composer/flowDesigner/views/properties/controls/DEFAULT.html&amp;#39;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above is basically the reason why directives were created in Angular. A directive allows you to create a chuck on code that can be expressed as a tag, a pseudo web component if you will. Directives also allows us to isolate functionality and reduce the amount of code that is in a “page” controller.&lt;/p&gt;

&lt;h3 id=&quot;directive-example&quot;&gt;directive example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;angular(&quot;mainApp&quot;)
    // We define the name of the directive with a prefix. The prefix helps to 
    // distinguish our custom html directive tags from actual html tags
    // example : &amp;lt;com-header&amp;gt; vs &amp;lt;header&amp;gt;
    //
    // NOTE: Angular converts camel case to dash case when rendering directives. 
    //       So in our html page, we will use &amp;lt;com-properties&amp;gt; instead of &amp;lt;comProperies&amp;gt;
    .directive(&quot;comProperies&quot;, function () {
        &quot;use strict&quot;;

        return {
            // restrict how this directive can be used, E means as an html tag only
            restrict: &quot;E&quot;,
 
            // replace the tag on the page with the template of this directive
            replace: true, 

            // path to our html template
            templateUrl: &quot;app/views/comProperies.tpl.html&quot;,

            // html to JS linking function
            link: properiesLink,

            // this directive&#39;s controller function
            // NOTE: Start with a capital letter since angular uses controller like 
            //       pseudo classes
            controller: ProperiesCtrl
        };
  
        function properiesLink($scope, $element, $attrs) {
            // The linking function allows us to add any html manipulation we might need.
            // Basically, if you are using jQuery &quot;$&quot; selector function for anything, 
            // add it here.
            //
            // NOTE: Try to avoid using a linking function. Angular has a lot of directives 
            //       you can add to your template file so you don&#39;t need one. 
            //       If you are doing anything with the $attrs object, use $attrs.$observe. 
            //       This will trigger a function if the value of an attribute ever changes.
            //       $element is a jQuery reference to your template&#39;s root html element.
        }
  
        function ProperiesCtrl($scope) {
            // A basic controller function for this directive. One thing to remember is that 
            // all instances of this directive use the same controller. So, for example, 
            // &quot;this.currentIndex = 0;&quot; would be a global variable among all 
            // &amp;lt;com-properties&amp;gt; elements.
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not too much has changed in this example except for code structure. The real advantage can be seen as you start to expand functionality of this directive. For example, this directive looks like it creates a form and lists out the properties in currentElement.props so that they can be edited. Now we want to list out the properties of currentPlan.details. By re-using the “ng-model” attribute that is provided by angular. We can update the custom directive html element so it can be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;com-properties ng-model=”currentPlan.details”&amp;gt;&amp;lt;/com-properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make this update, first inside our template, find and change &lt;strong&gt;ng-repeat=”key in mainTabKeys”&lt;/strong&gt; to &lt;strong&gt;ng-repeat=”key in ngModel”&lt;/strong&gt;. Next, add &lt;strong&gt;scope : {ngModel : “=” }&lt;/strong&gt; to the return object in the directive so now our directive looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;angular(&quot;mainApp&quot;)
    .directive(&quot;comProperies&quot;, function () {
        &quot;use strict&quot;;

        return {
            restrict: &quot;E&quot;,
            replace: true, 
            templateUrl: &quot;app/views/comProperies.tpl.html&quot;,
            link: properiesLink,
            controller: ProperiesCtrl,
            scope : { 
                ngModel : &quot;=&quot; 
            }
        };
        
        // ...
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this change, this directive will now list out all the properties of whatever object the attribute &lt;strong&gt;ng-model&lt;/strong&gt; is set to. I encourage you to read more about directive by following the links below, since this article is a very limited overview of how directives are used in AngularJS.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.angularjs.org/1.3.14/docs/guide/directive&quot;&gt;code.angularjs.org/1.3.14/docs/guide/directive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.angularjs.org/1.3.14/docs/api/ng/service/$compile&quot;&gt;code.angularjs.org/1.3.14/docs/api/ng/service/$compile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 05 Mar 2015 00:00:00 -0500</pubDate>
        <link>http://jasonsavage.github.io/blog/instead-of-ng-include-try-an-angularjs-directive.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/instead-of-ng-include-try-an-angularjs-directive.html</guid>
        
        
      </item>
    
      <item>
        <title>Stop trying to add class structure to JavaScript</title>
        <description>&lt;p&gt;Recently, I read a great article titled &lt;a href=&quot;https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3&quot;&gt;The Two Pillars of Javascript&lt;/a&gt;, and one of the points of the article that I found interesting was the part about trying to create classes in JavaScript. Stop trying to create class structure in JavaScript? But, I thought classes and &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OOP&lt;/a&gt; are how we should be programming, plus classes are everywhere in .NET, Java and Ruby.&lt;/p&gt;

&lt;p&gt;The article talks about how JavaScript is not like other languages and how we should embrace the “objects without classes” and “anonymous functions (Lambdas)” structure that it provides. I found this to be an interesting topic because after reading that article, I realized, that in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; I’m unconsciously doing this already. With AngularJS you never use the “prototype” or “new” keywords, because your only registering objects or constructor functions.&lt;/p&gt;

&lt;p&gt;Ok, lets step back, what are we talking about? Here is how we create an object using class like functionality as shown in a previous post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var Car = function(color) {
    this._wheels = 4;
    this._condition = &#39;good&#39;;
    this.initialize(color);
}
Car.prototype.initialize = function(color) {
    this._color = color;
    ...
};
Car.prototype.drive = function(speed) {};

//create a car and drive
var myCar = new Car(#bada55);
myCar.drive(90);

//and then extend Car and create a Truck
var Truck = function(color){
    this._type = &#39;pickup&#39;;
    this.initialize(color);
}
var tmp = Truck.prototype = new Car();
Truck.prototype.Car_initialize = tmp.initialize;
Truck.prototype.initialize = function(color) {
    this.Car_initialize(color);
    ...
};
Truck.prototype.tow = function(weight){};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this works fine, but how can we do this using just objects and factory methods? The key method you will need is the extend method which we can borrow from jquery $.extend() or any other JavaScript frameworks. The extend method basically copies all the properties and methods from one object to another. You’ve probably used this to create copies of data objects already.&lt;/p&gt;

&lt;p&gt;With this method we can do the same operation as above but with factory methods instead of fake classes. For the Truck object, we can just ‘extend’ and internal car object using the extend method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function createCar (color) {
    var _color = color,
        _wheels = 4,
        _condition = &#39;good&#39;;
        
    return {
        getColor : function () { return _color; },
        setColor : function (color) {
            _color = color;
        },
        drive : function (speed) {}
    }
}
//and then extend Car and create a Truck
function createTruck (color) {
    var _car = createCar(color),
        _type = &#39;pickup&#39;;
    
    //here we can use our extend method to add new methods to truck
    return $.extend(_car, {
        getType : function () { return _type; },
        tow : function (weight) {}
    });
}

//now we can create a truck and drive
var myTruck = createTruck(#bada55);
console.log(myTruck.getType());
myTruck.drive(90);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the great things about this way is you can now have real private variables. There is no way to access _color and _wheels, unless you create getters and setters which is generally a good practice. We can even have private functions inside our factory methods. Here is a Wiki link to learn more about the &lt;a href=&quot;http://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;Factory Method Pattern&lt;/a&gt;. This article only covers a small part of it.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://jasonsavage.github.io/blog/stop-trying-to-add-class-structure-to-javascript.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/stop-trying-to-add-class-structure-to-javascript.html</guid>
        
        
      </item>
    
      <item>
        <title>AngularJS custom data table example</title>
        <description>&lt;p&gt;This is probably the first of many post on &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; since the project I’m on uses AngularJS for the front-end with a Java (Play framework) back-end. I don’t know anything about Play (sorry) but I have picked up quite a lot of Angular in the last few months.&lt;/p&gt;

&lt;p&gt;Feeling like I might be finally getting the hang of AngularJS, I wanted to do a post about the custom data table I just finished. Before You read more, if you want a pre-made component then I’d recommend &lt;a href=&quot;http://bazalt-cms.com/ng-table/&quot;&gt;ngTable&lt;/a&gt;. We actually used it for some of the work on this project. In some situation we ended up running into issues and just rolled our own. It seems that, with AngularJS, I often start using a pre-built solution and find myself in a hole with some functionality that the client requested and that wasn’t originally part of the component, ugh.&lt;/p&gt;

&lt;p&gt;This is just a place for you to start from in your project. This table directive will have 2 attributes, “ng-model” which will be the rows of data and “columns” which will be how you configure columns headers and what data to display.&lt;/p&gt;

&lt;h3 id=&quot;directive&quot;&gt;Directive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// customAngularTable.js
mainApp.directive(&#39;customAngularTable&#39;, function () {
    return {
        restrict : &#39;E&#39;, //this can only be used as a tag &lt;my-custom-table /&gt;
        replace  : true, //replace the html tag with out template
        require  : &#39;ngModel&#39;, //this directive has to have the attr ng-modal=&quot;&quot;
        scope    : {
            ngModel : &#39;=&#39;, //variable name will be the same on our scope object
            columns : &#39;=&#39;
        },
        templateUrl : &#39;customAngularTable.tpl.html&#39;,
        controller : &#39;customAngularTableCtrl&#39;
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;html-template&quot;&gt;HTML Template&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th ng-repeat=&amp;quot;col in columns&amp;quot; 
                    ng-click=&amp;quot;applySort(col)&amp;quot;&amp;gt;
                    
                &amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th ng-repeat=&amp;quot;col in columns&amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;quot;text&amp;quot; 
                           ng-model=&amp;quot;filters[col.property]&amp;quot; 
                           ng-change=&amp;quot;applyFilters(col)&amp;quot; /&amp;gt;
                &amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr ng-repeat=&amp;quot;row in tableRows&amp;quot;&amp;gt;
                &amp;lt;td ng-repeat=&amp;quot;col in columns&amp;quot;&amp;gt;
                    
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    
    &amp;lt;hr /&amp;gt;
    &amp;lt;!-- We can just use a pre-built component to page since that 
            is beyond the scope of this tutorial --&amp;gt;
    &amp;lt;pagination ng-model=&amp;quot;currentPage&amp;quot; 
                items-per-page=&amp;quot;pageSize&amp;quot; 
                total-items=&amp;quot;rowsTotal&amp;quot; 
                previous-text=&amp;quot;&amp;amp;lsaquo;&amp;quot; 
                next-text=&amp;quot;&amp;amp;rsaquo;&amp;quot;&amp;gt;
    &amp;lt;/pagination&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// CustomAngularTableCtrl.js
mainApp.controller(&#39;customAngularTableCtrl&#39;, function ($scope) {
    &#39;use strict&#39;;

    /**
     * View Variables
     */
    $scope.tableRows = [];
    //- sorting
    $scope.currentSortColumn = null;
    $scope.currentSortOrder = &#39;&#39;;
    //- filtering
    $scope.filters = {};
    // - paging
    $scope.currentPage = 1;
    $scope.pageSize = 10;
    $scope.rowsTotal = 1;

    /**
     * View Methods
     */
    $scope.applySort = function (columnToSortOn) {
        
        if($scope.currentSortColumn === columnToSortOn) {
            //user has clicked the same column, so we need to change sort order
            //we have 3 sorting states here to step through (asc,desc,&#39;&#39;)
            $scope.currentSortOrder = ($scope.currentSortOrder === &#39;&#39;) ? 
                &#39;asc&#39; : ($scope.currentSortOrder === &#39;asc&#39; ? &#39;desc&#39; : &#39;&#39;);
            
            //if the previous operation set currentSortOder to blank, 
            //remove currentSortColumn
            if($scope.currentSortOrder === &#39;&#39;) {
                $scope.currentSortColumn = null;
            }
        } else {
            //user has clicked a new column
            $scope.currentSortColumn = columnToSortOn;
            //step to first sort state
            $scope.currentSortOrder = &#39;asc&#39;;
        }
        
        //update view
        updateTableData();
        
    };
    
    $scope.applyFilters = function () {
        //reset current page to 1, se we don&#39;t filter out all the rows 
        //and display an invalid page
        $scope.currentPage = 1;
        
        //since, updateTableData will apply all the filters for us, 
        //we just need to re-call that method here.
        updateTableData();
    };

    /**
     * Watches 
     */
    //we&#39;ll need to setup a watch for ngModel so if it changes we update the view
    $scope.$watch(&#39;ngModel&#39;, function (newValue, oldValue) {
        //check if the value is defined and not null
        if(angular.isDefined(newValue) &amp;amp;&amp;amp; newValue !== null) {
            //since we have a new array, update view
            updateTableData();
        }
    });
    
    //We need to watch currentPage so we can update the view with the current page
    $scope.$watch(&quot;currentPage&quot;, function (newValue, oldValue) {
        //check if the page really did change
        if(newValue !== oldValue) {
            updateTableData();
        }
    });

    /**
     * Private Methods
     */   

    function updateTableData () {
        //we will create a new array that we will fill with 
        //all the rows that should still bee in the view.
        var viewArray;

        //step 1: apply filtering on all the rows
        viewArray = $scope.ngModel.filter(applyFilters);
        
        //step 2: if the user has clicked a column, apply sorting
        if($scope.currentSortColumn !== null) {
            // using a getSorter function here allows you to use custom 
            // sorting if you want
            viewArray = viewArray.sort(getSorter());
        }
        
        //step 3: update pagination and apply
        $scope.rowsTotal = viewArray.length;
        // - current page is 1, based but our array is 0 based so subtract 1
        var pageStartIndex = ($scope.currentPage-1) * $scope.pageSize;
        // - page end index is either page size or whatever is left in the array
        var pageEndIndex = pageStartIndex + Math.min(viewArray.length, $scope.pageSize);
        // - splice view array to page start and end index&#39;s, and return the 
        //   page we want to view
        viewArray = viewArray.splice(pageStartIndex, pageEndIndex);
        
        //pass the ref to the viewArray to $scope and let angular refresh the html table
        $scope.tableRows = viewArray;
    }
    
    function applyFilters (row) {
        var allowed = true;
        
        //since we set ng-model on each input in the 2nd header row to filters[col.property] 
        //in the view, angular will auto-create a matching property key on the filters object 
        //and set it to whatever the user types into that input.
        
        //So, here we can loop through each property on the $scope.filters property and check
        //if the row should still be displayed.
        Object.keys($scope.filters).forEach(function (key) {
            var rowValue = row[key],
                filterValue = (angular.isDefined($scope.filters[key]) 
                                 ? $scope.filters[key] : &quot;&quot;);
            
            //if this value is still allowed by other columns, 
            //test it with this filter value
            if(allowed &amp;amp;&amp;amp; filterValue !== null) {
                //here is a good place to add custom filters based on this column. 
                //Ex. var column = lookupColumnFormKey(key);
                //    if(column.type === &#39;number&#39;)  
                //        allowed = numberFilter(rowValue, filterValue); 
    
                allowed = stringSearchFilter(rowValue, filterValue);
            }
        });
        return allowed;
    }
    
    function getSorter () {
        //Here you can return different sort functions based on $scope.currentSortColumn
        //Ex. if($scope.currentSortColumn.type === &#39;number) 
        //         return numberSorter($scope.currentSortColumn, $scope.currentSortOrder);

        return stringSorter($scope.currentSortColumn, $scope.currentSortOrder);
    }
    
    /**
     * Checks if value contains the chars that are in filterValue.
     */
    function stringSearchFilter (value, filterValue) {
        value = value.toString().toLowerCase(); //toString in case it&#39;s a number
        filterValue.toString().trim().toLowerCase();
        return (value.indexOf(filterValue) !== -1);
    }
    
    /**
     * Compares 2 rows as strings based on sortColumn.property.
     */
    function stringSorter (sortColumn, sortOrder) {
        return function (rowA, rowB) {
            var valueA = rowA[sortColumn.property],
                valueB = rowB[sortColumn.property],
                result = valueA.localeCompare(valueB);
            if(sortOrder === &#39;desc&#39;) {
                result *= -1;
            }
            return result;
        };
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to add as many comments as I could so you can see whats going on here. Next would be how to implement this directive. You’ll need to setup the columns array based on the data you want to display in the table.&lt;/p&gt;

&lt;h3 id=&quot;config-example&quot;&gt;Config Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;mainApp.controller(&#39;AngularTableTestCtrl&#39;, function($scope) {
    $scope.rows = [
        { first : &#39;Sue&#39;, last : &#39;Davis&#39;, title : &#39;Web Developer&#39;, company : &#39;Infusion&#39; },
        { first : &#39;David&#39;, last : &#39;Marks&#39;, title : &#39;Sales Rep&#39;, company : &#39;Walmart&#39; },
        { first : &#39;Jake&#39;, last : &#39;Richards&#39;, title : &#39;Customer Service&#39;, company : &#39;Target&#39; }
    ];
    $scope.columns = [
        { label : &#39;First Name&#39;, property : &#39;first&#39; },
        { label : &#39;Last Name&#39;, property : &#39;last&#39; },
        { label : &#39;Occupation&#39;, property : &#39;title&#39; },
        { label : &#39;Company&#39;, property : &#39;company&#39; }
    ];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;custom-angular-table columns=&amp;quot;columns&amp;quot; ng-model=&amp;quot;rows&amp;quot;&amp;gt;&amp;lt;/custom-angular-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will setup a very basic angular data table directive with filtering, sorting and paging that you can add to as needed. For paging I used &lt;a href=&quot;http://angular-ui.github.io/bootstrap/#/pagination&quot;&gt;Angular UI Bootstrap&lt;/a&gt; which works really nice. In the app I’m working on we added custom filters, sorters and input fields into the table body with validation. Basicly, Excel in the browser :). You are free to use these files as you like and they can be found on my GitHub repo &lt;a href=&quot;https://github.com/jasonsavage/simple-angular-table&quot;&gt;github.com/jasonsavage/simple-angular-table&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/angularjs-custom-data-table-example.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/angularjs-custom-data-table-example.html</guid>
        
        
      </item>
    
      <item>
        <title>Moving to Raleigh to work for Infusion</title>
        <description>&lt;p&gt;The time has come for me to pack my bags and move south. I’ve been in Pittsburgh, PA since I graduated from &lt;a href=&quot;http://www.edinboro.edu/&quot;&gt;Edinboro University&lt;/a&gt; in 2003, and even a few years before college. Living and working in the burgh, I’ve gained a lot of experience and had the pleasure working with many really talented people. But, alas, the weather has finally gotten to my wife and me. Plus, my son is starting 2nd grade in the fall! and I fear that if we don’t move soon, we’ll never leave.&lt;/p&gt;

&lt;p&gt;I was offered an Interactive Developer role with a big New York company called &lt;a href=&quot;http://www.infusion.com/&quot;&gt;Infusion&lt;/a&gt;. Infusion is opening an office in Raleigh, NC and I’ll be part of the many new hires for that team.&lt;/p&gt;

&lt;p&gt;It saddens me to leave my current role with Moxie and move out of the city I’ve grown to love (and hate sometimes), but this is a great opportunity and I have to give it a try. Raleigh is a really pretty city and the area is booming with a lot of tech jobs, so we’ll see how it goes… and hey, you can always move back, right?&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/moving-to-raleigh-to-work-for-infusion.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/moving-to-raleigh-to-work-for-infusion.html</guid>
        
        
      </item>
    
      <item>
        <title>Date Strings from Twitter &amp; Facebook Invaild? (IE &amp; Safari)</title>
        <description>&lt;p&gt;Just learned about this yesterday. It seems that if you pass the date string that is returned from Twitter and/or Facebook to the javascript Date() constructor, in IE (and Safari), it shows it as an invalid date.&lt;/p&gt;

&lt;p&gt;Twitter returns the “created_time” as something like this: Thu May 01 13:57:04 +0000 2014, which is shown as “Invalid Date” in IE.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//created_time = Thu May 01 13:57:04 +0000 2014
var date = new Date( jsonData.created_time );
console.log( date.toString() );
// = IE 9 &amp;amp; 10: &#39;Invalid Date&#39; 
// = Chrome:    &#39;Mon May 05 2014 14:50:00 GMT-0400 (Eastern Daylight Time)&#39;
// = FireFox:   &#39;Mon May 05 2014 14:50:00 GMT-0400 (Eastern Standard Time)&#39;
// = Safari:    &#39;Mon May 05 2014 14:50:00 GMT-0400 (Eastern Daylight Time)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Facebook, the ‘created_time’ value is something like: 2014-04-17T12:59:04+0000, which is shown as “Invalid Date” in IE and Safari.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//created_time = 2014-04-17T12:59:04+0000
var date = new Date( jsonData.created_time ); 
console.log( date.toString() );
// = IE 9 &amp;amp; 10: &#39;Invalid Date&#39; 
// = Chrome:    &#39;Thu Apr 17 2014 08:59:04 GMT-0400 (Eastern Daylight Time)&#39;
// = FireFox:   &#39;Thu Apr 17 2014 08:59:04 GMT-0400 (Eastern Standard Time)&#39;
// = Safari:    &#39;Invalid Date&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What fixed the problem, for now, was to do a little manipulation on the date string before it is passed it to the Date() constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//twitter = &#39;Thu May 01 13:57:04 +0000 2014&#39;
//facebook = &#39;2014-04-17T12:59:04+0000&#39;
    
var created = facebook.created_time;
if( isFacebook ) {
    //this fixes the issue in IE and Safari, and still works in Firefox and Chrome even though they don&#39;t need it.
    created = created.replace(/-/g, &#39;/&#39;).replace(/T/, &#39; &#39;).replace(/\+/, &#39; +&#39;);
}
else if( isTwitter ) {
    //this is only an issue in IE, so we can just do a quick test and fix the issue.
    if( navigator.userAgent.match(/MSIE\s([^;]*)/) )
        created = created .replace(/( \+)/, &#39; UTC$1&#39;);
}
var date = new Date( created );
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 08 May 2014 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/date-strings-from-twitter-and-facebook-invalid.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/date-strings-from-twitter-and-facebook-invalid.html</guid>
        
        
      </item>
    
      <item>
        <title>Moving my SVG Animation to Canvas with EaselJS (follow-up post)</title>
        <description>&lt;p&gt;This is a follow-up to the previous post titled “SVG Animation With Clip Paths and Linear Gradients”. I was able you port the SVG animation over to the &amp;lt;canvas /&amp;gt; using &lt;a href=&quot;http://www.createjs.com/#!/EaselJS&quot;&gt;EaselJS&lt;/a&gt;. It wasn’t too bad, I was having a lot of trouble converting the SVG path data that was exported from illustrator, but that all changed when my co-worker found this site: &lt;a href=&quot;http://www.professorcloud.com/svg-to-canvas/&quot;&gt;www.professorcloud.com/svg-to-canvas/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the code I ended up with that re-created the animation from before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function initCanvasHeart(canvasId) {
    var stage       = new createjs.Stage(canvasId),
        goldRect    = new createjs.Shape(),
        greenRect   = new createjs.Shape(),
        blueRect    = new createjs.Shape(),
        goldMsk     = new createjs.Shape(),
        greenMsk    = new createjs.Shape(),
        blueMsk     = new createjs.Shape(),
        aa          = new createjs.Shape(),
        width       = stage.canvas.width,
        height      = stage.canvas.height,
        rectWidth   = width / 0.4;
    
    //create gold rect
    goldRect.graphics
        .beginLinearGradientFill(
            [&quot;#FFC423&quot;, &quot;#ffe191&quot;, &quot;#FFC423&quot;], 
            [0.4, 0.5, 0.6], 0, 0, rectWidth, 0)
        .drawRect(0, 0, rectWidth, height);

    goldRect.x = width-rectWidth;
    goldRect.cache(0,0,rectWidth, height);
    
    //add it to the canvas
    stage.addChild(goldRect);
    
    //create gold rect mask
    drawGoldStrip( goldMsk.graphics.beginFill(&quot;#000000&quot;) );
    goldRect.mask = goldMsk;
    
    //create green rect
    greenRect.graphics
        .beginLinearGradientFill(
            [&quot;#6EB43F&quot;, &quot;#b6d99f&quot;, &quot;#6EB43F&quot;], 
            [0.4, 0.5, 0.6], 0, 0, rectWidth, 0)
        .drawRect(0, 0, rectWidth, height);

    greenRect.x = width-rectWidth;
    greenRect.cache(0,0,rectWidth, height);
    
    //add it to the canvas
    stage.addChild(greenRect);
    
    //create green rect mask
    drawGreenStrip( greenMsk.graphics.beginFill(&quot;#000000&quot;) );
    greenRect.mask = greenMsk;
    
    //create blue rect
    blueRect.graphics
        .beginLinearGradientFill(
            [&quot;#0083C8&quot;, &quot;#7fc1e3&quot;, &quot;#0083C8&quot;], 
            [0.4, 0.5, 0.6], 0, 0, rectWidth, 0)
        .drawRect(0, 0, rectWidth, height);

    blueRect.x = width-rectWidth;
    blueRect.cache(0,0,rectWidth, height);
    
    //add it to the canvas
    stage.addChild(blueRect);
    
    //create blue rect mask
    drawBlueStrip( blueMsk.graphics.beginFill(&quot;#000000&quot;) );
    blueRect.mask = blueMsk;
    
    //add a layer to fix anti-aliasing in Chrome
    //- the mask in chrome was really pixelated compared to Firefox
    aa.graphics.setStrokeStyle(1, 1, 1, 2);
    drawGreenStrip( aa.graphics.beginStroke(&quot;#6EB43F&quot;) ).endStroke();
    drawGoldStrip( aa.graphics.beginStroke(&quot;#FFC423&quot;) ).endStroke();
    drawBlueStrip( aa.graphics.beginStroke(&quot;#0083C8&quot;) ).endStroke();
    aa.cache(0, 0, width, height);
    stage.addChild(aa);

    //add animations
    //using TweenJS that is part of EaselJS, we can create a simple repeating animation
    createjs.Tween.get(goldRect, {loop:true}).to({x: 0 }, 8000);
    createjs.Tween.get(greenRect, {loop:true}).to({x: 0 }, 8000);
    createjs.Tween.get(blueRect, {loop:true}).to({x: 0 }, 8000);
    
    //add an event listener to the internal ticker object to update the stage, 
    //otherwise we won&#39;t see the animation
    createjs.Ticker.addEventListener(&quot;tick&quot;, function( evt ) { 
        stage.update();
    });
}

//these method were each generated by:
//http://www.professorcloud.com/svg-to-canvas/ 
function drawGreenStrip(g) {
    g.moveTo(72.603,317.736);
    g.bezierCurveTo(71.87,316.727,74.997,320.537,72.603,317.736);
    g.bezierCurveTo(63.166,306.699,37.833999999999996,281.177,25.986999999999995,258.153);
    g.bezierCurveTo(-0.2700000000000067,207.12500000000003,-12.807000000000002,128.69500000000002,18.386999999999993,68.50900000000001);
    g.bezierCurveTo(38.157,30.357,72.942,6.779,118.972,0.328);
    g.bezierCurveTo(122.661,0.096,126.004,0,129.237,0);
    g.bezierCurveTo(180.874,0,240.743,26.183,251.61399999999998,145.724);
    g.lineTo(251.61399999999998,145.724);    g.bezierCurveTo(224.38899999999998,88.70599999999999,175.11599999999999,64.73599999999999,124.02599999999998,79.07799999999999);
    g.bezierCurveTo(96.53399999999998,86.79299999999999,72.37499999999997,114.35999999999999,60.29699999999998,146.654);
    g.bezierCurveTo(42.154,195.165,42.749,259.684,72.603,317.736);
    g.lineTo(72.603,317.736);
    g.closePath();
    return g;
}
   
function drawGoldStrip(g) {
    g.moveTo(446.57,41.168);
    g.bezierCurveTo(423.02,17.616,391.671,4.649,358.286,4.649);
    g.bezierCurveTo(310.154,4.649,265.962,31.224,249.12099999999998,69.678);
    g.bezierCurveTo(253.90999999999997,82.536,257.52799999999996,97.475,259.68199999999996,114.699);
    g.bezierCurveTo(279.698,91.652,307.98499999999996,77.94200000000001,335.94599999999997,77.94200000000001);
    g.bezierCurveTo(358.849,77.94200000000001,379.186,87.218,391.736,103.39500000000001);
    g.bezierCurveTo(407.001,123.06200000000001,410.514,151.238,401.897,184.871);
    g.bezierCurveTo(389.59499999999997,232.871,326.669,325.246,243.46599999999998,359.457);
    g.bezierCurveTo(244.652,359.401,276.452,359.675,295.70399999999995,354.659);
    g.bezierCurveTo(372.371,334.659,441.4409999999999,277.092,459.236,242.862);
    g.bezierCurveTo(490.488,182.738,503.576,98.174,446.57,41.168);
    g.closePath();
    return g;
}
   
function drawBlueStrip(g) {
    g.moveTo(239.213,444.16);
    g.bezierCurveTo(218.941,444.16,205.017,435.036,187.38,423.485);
    g.bezierCurveTo(183.989,421.265,180.448,418.94100000000003,176.668,416.56);
    g.bezierCurveTo(152.79000000000002,401.536,106.22800000000001,355.632,96.757,342.354);
    g.bezierCurveTo(67.397,301.205,44.056000000000004,186.868,72.796,146.81599999999997);
    g.lineTo(79.569,137.36399999999998);
    g.lineTo(80.349,148.96899999999997);
    g.bezierCurveTo(83.259,192.36699999999996,93.43100000000001,212.12199999999996,111.904,247.97699999999998);
    g.bezierCurveTo(137.74599999999998,298.144,195.71699999999998,360.70899999999995,248.362,371.56399999999996);
    g.bezierCurveTo(307.151,369.43199999999996,356.589,351.84,428.28700000000003,299.106);
    g.lineTo(428.28700000000003,299.106);
    g.bezierCurveTo(401.58700000000005,335.235,329.206,400.438,291.47900000000004,424.78499999999997);
    g.bezierCurveTo(277.495,433.81,258.921,444.16,239.213,444.16);
    g.closePath();
    return g;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 05 May 2014 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/moving-my-svg-animation-to-canvas-with-easeljs.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/moving-my-svg-animation-to-canvas-with-easeljs.html</guid>
        
        
      </item>
    
      <item>
        <title>SVG Animation With Clip Paths and Linear Gradients</title>
        <description>&lt;p&gt;One of our clients decided to update their logo from a circle to more of a heart. Currently, on the about us page of their website, they have a large version of their logo that spins slowly and when you rollover (or swipe/tap) each color in the logo information appears describing their products. One of our designers and I, sat down to discuss what we could do with a heart shaped logo because having it spin looked weird. We finally came up with a subtle shine effect on the colors, which at first, I thought would be easy since I’ve done it before with flash. I came to find out that there was a little more to it then I originally thought.&lt;/p&gt;

&lt;p&gt;I decided to try the animation with SVG. After reading up on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG graphics and animations&lt;/a&gt;, came up with the following which turned out great:&lt;/p&gt;

&lt;svg width=&quot;486&quot; height=&quot;446&quot; viewbox=&quot;0 0 486 446&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
    &lt;defs&gt;
        &lt;lineargradient id=&quot;gradGold&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;
          &lt;stop offset=&quot;30%&quot; style=&quot;stop-color:#FFC423; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;50%&quot; style=&quot;stop-color:#ffe191; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;70%&quot; style=&quot;stop-color:#FFC423; stop-opacity:1&quot; /&gt;
        &lt;/lineargradient&gt;
        &lt;lineargradient id=&quot;gradGreen&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;
          &lt;stop offset=&quot;30%&quot; style=&quot;stop-color:#6EB43F; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;50%&quot; style=&quot;stop-color:#b6d99f; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;70%&quot; style=&quot;stop-color:#6EB43F; stop-opacity:1&quot; /&gt;
        &lt;/lineargradient&gt;
        &lt;lineargradient id=&quot;gradBlue&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;
          &lt;stop offset=&quot;30%&quot; style=&quot;stop-color:#0083C8; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;50%&quot; style=&quot;stop-color:#7fc1e3; stop-opacity:1&quot; /&gt;
          &lt;stop offset=&quot;60%&quot; style=&quot;stop-color:#0083C8; stop-opacity:1&quot; /&gt;
        &lt;/lineargradient&gt;
        &lt;clippath id=&quot;stripGold&quot;&gt;
            &lt;path id=&quot;gold&quot; d=&quot;M446.57,41.168C423.02,17.616,391.671,4.649,358.286,4.649c-48.132,0-92.324,26.575-109.165,65.029
                c4.789,12.858,8.407,27.797,10.561,45.021c20.016-23.047,48.303-36.757,76.264-36.757c22.903,0,43.24,9.276,55.79,25.453
                c15.265,19.667,18.778,47.843,10.161,81.476c-12.302,48-75.228,140.375-158.431,174.586c1.186-0.056,32.986,0.218,52.238-4.798
                c76.667-20,145.737-77.567,163.532-111.797C490.488,182.738,503.576,98.174,446.57,41.168z&quot; /&gt;
        &lt;/clippath&gt;
        
        &lt;clippath id=&quot;stripGreen&quot;&gt;
            &lt;path id=&quot;green&quot; d=&quot;M72.603,317.736C71.87,316.727,74.997,320.537,72.603,317.736c-9.437-11.037-34.769-36.559-46.616-59.583
                c-26.257-51.028-38.794-129.458-7.6-189.644C38.157,30.357,72.942,6.779,118.972,0.328C122.661,0.096,126.004,0,129.237,0
                c51.637,0,111.506,26.183,122.377,145.724l0,0c-27.225-57.018-76.498-80.988-127.588-66.646
                c-27.492,7.715-51.651,35.282-63.729,67.576C42.154,195.165,42.749,259.684,72.603,317.736L72.603,317.736z&quot; /&gt;
        &lt;/clippath&gt;
        
        &lt;clippath id=&quot;stripBlue&quot;&gt;
            &lt;path id=&quot;blue&quot; d=&quot;M239.213,444.16c-20.272,0-34.196-9.124-51.833-20.675c-3.391-2.22-6.932-4.544-10.712-6.925
                c-23.878-15.024-70.44-60.928-79.911-74.206c-29.36-41.149-52.701-155.486-23.961-195.538l6.773-9.452l0.78,11.605
                c2.91,43.398,13.082,63.153,31.555,99.008c25.842,50.167,83.813,112.732,136.458,123.587
                c58.789-2.132,108.227-19.724,179.925-72.458l0,0c-26.7,36.129-99.081,101.332-136.808,125.679
                C277.495,433.81,258.921,444.16,239.213,444.16z&quot; /&gt;
        &lt;/clippath&gt;
    &lt;/defs&gt;

    &lt;rect x=&quot;-486&quot; y=&quot;0&quot; width=&quot;972&quot; height=&quot;400&quot; clip-path=&quot;url(#stripGold)&quot; fill=&quot;url(#gradGold)&quot;&gt;
        &lt;animate attributename=&quot;x&quot; attributetype=&quot;XML&quot; from=&quot;-486&quot; to=&quot;243&quot; begin=&quot;2s&quot; dur=&quot;8s&quot; calcmode=&quot;paced&quot; repeatcount=&quot;indefinite&quot; /&gt;
    &lt;/rect&gt;

    &lt;rect x=&quot;-650&quot; y=&quot;0&quot; width=&quot;972&quot; height=&quot;400&quot; clip-path=&quot;url(#stripGreen)&quot; fill=&quot;url(#gradGreen)&quot;&gt;
        &lt;animate attributename=&quot;x&quot; attributetype=&quot;XML&quot; from=&quot;-650&quot; to=&quot;0&quot; dur=&quot;8s&quot; begin=&quot;0s&quot; calcmode=&quot;paced&quot; repeatcount=&quot;indefinite&quot; /&gt;
    &lt;/rect&gt;
    
    &lt;rect x=&quot;-540&quot; y=&quot;100&quot; width=&quot;972&quot; height=&quot;400&quot; clip-path=&quot;url(#stripBlue)&quot; fill=&quot;url(#gradBlue)&quot;&gt;
        &lt;animate id=&quot;animaRectBlue&quot; attributename=&quot;x&quot; attributetype=&quot;XML&quot; from=&quot;-540&quot; to=&quot;50&quot; begin=&quot;1s&quot; dur=&quot;8s&quot; calcmode=&quot;paced&quot; repeatcount=&quot;indefinite&quot; /&gt;
    &lt;/rect&gt;
&lt;/svg&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you can see the animation (more on that in a sec), what is happening is that I have 3 wide &amp;lt;rect /&amp;gt; tags each with a &amp;lt;linearGradient /&amp;gt; set as there fill. Each rectangle has an &amp;lt;animation /&amp;gt; tag that slowly animates it from left to right and then repeats. I also have 3 &amp;lt;clipPaths /&amp;gt; tags that each contain a &amp;lt;path /&amp;gt; tag whose “d” attribute is a bunch of draw commands I exported from illustrator. This is one of my first times working with SVG graphics and I really enjoyed it. I can’t wait until it is more widely supported because it reminds me of &lt;a href=&quot;http://www.adobe.com/products/flex.html&quot;&gt;Flex&lt;/a&gt; and &lt;a href=&quot;https://wikidocs.adobe.com/wiki/display/Flex/MXML&quot;&gt;MXML&lt;/a&gt;.
That last sentence about it being more &lt;a href=&quot;http://caniuse.com/#cats=SVG&quot;&gt;widely supported&lt;/a&gt; is where I am now. I have a backup image setup as a fallback for users whose browsers don’t support SVG, ClipPath, and SMIL animations, but the account managers are a little concerned that the client is going to be upset since we made a big deal about this.&lt;/p&gt;

&lt;p&gt;So, today I’m going to revisit one of the ideas of using the canvas to draw this animation. It’s a bit more supported right now, but before, I was having trouble getting the vector drawing correct since each part of the logo is an irregular shape. I’m thinking either using &lt;a href=&quot;http://www.createjs.com/#!/EaselJS&quot;&gt;EaselJS&lt;/a&gt; (since I’ve used it before) or maybe &lt;a href=&quot;http://fabricjs.com/&quot;&gt;FabricJS&lt;/a&gt; (since I think it might be more popular).&lt;/p&gt;

&lt;p&gt;Here ia the raw html code for the above image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;svg width=&amp;quot;486&amp;quot; height=&amp;quot;446&amp;quot; viewBox=&amp;quot;0 0 486 446&amp;quot; version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot;&amp;gt;
    &amp;lt;defs&amp;gt;
        &amp;lt;linearGradient id=&amp;quot;gradGold&amp;quot; x1=&amp;quot;0%&amp;quot; y1=&amp;quot;0%&amp;quot; x2=&amp;quot;100%&amp;quot; y2=&amp;quot;0%&amp;quot;&amp;gt;
          &amp;lt;stop offset=&amp;quot;30%&amp;quot; style=&amp;quot;stop-color:#FFC423; stop-opacity:1&amp;quot; /&amp;gt;
          &amp;lt;stop offset=&amp;quot;50%&amp;quot; style=&amp;quot;stop-color:#ffe191; stop-opacity:1&amp;quot; /&amp;gt;
          &amp;lt;stop offset=&amp;quot;70%&amp;quot; style=&amp;quot;stop-color:#FFC423; stop-opacity:1&amp;quot; /&amp;gt;
        &amp;lt;/linearGradient&amp;gt;
        &amp;lt;linearGradient id=&amp;quot;gradGreen&amp;quot; x1=&amp;quot;0%&amp;quot; y1=&amp;quot;0%&amp;quot; x2=&amp;quot;100%&amp;quot; y2=&amp;quot;0%&amp;quot;&amp;gt;
          &amp;lt;stop offset=&amp;quot;30%&amp;quot; style=&amp;quot;stop-color:#6EB43F; stop-opacity:1&amp;quot; /&amp;gt;
          &amp;lt;stop offset=&amp;quot;50%&amp;quot; style=&amp;quot;stop-color:#b6d99f; stop-opacity:1&amp;quot; /&amp;gt;
          &amp;lt;stop offset=&amp;quot;70%&amp;quot; style=&amp;quot;stop-color:#6EB43F; stop-opacity:1&amp;quot; /&amp;gt;
        &amp;lt;/linearGradient&amp;gt;
        &amp;lt;linearGradient id=&amp;quot;gradBlue&amp;quot; x1=&amp;quot;0%&amp;quot; y1=&amp;quot;0%&amp;quot; x2=&amp;quot;100%&amp;quot; y2=&amp;quot;0%&amp;quot;&amp;gt;
          &amp;lt;stop offset=&amp;quot;30%&amp;quot; style=&amp;quot;stop-color:#0083C8; stop-opacity:1&amp;quot; /&amp;gt;
          &amp;lt;stop offset=&amp;quot;50%&amp;quot; style=&amp;quot;stop-color:#7fc1e3; stop-opacity:1&amp;quot;/&amp;gt;
          &amp;lt;stop offset=&amp;quot;60%&amp;quot; style=&amp;quot;stop-color:#0083C8; stop-opacity:1&amp;quot; /&amp;gt;
        &amp;lt;/linearGradient&amp;gt;
        &amp;lt;clipPath id=&amp;quot;stripGold&amp;quot;&amp;gt;
            &amp;lt;path id=&amp;quot;gold&amp;quot; d=&amp;quot;M446.57,41.168C423.02,17.616,391.671,4.649,358.286,4.649c-48.132,0-92.324,26.575-109.165,65.029
                c4.789,12.858,8.407,27.797,10.561,45.021c20.016-23.047,48.303-36.757,76.264-36.757c22.903,0,43.24,9.276,55.79,25.453
                c15.265,19.667,18.778,47.843,10.161,81.476c-12.302,48-75.228,140.375-158.431,174.586c1.186-0.056,32.986,0.218,52.238-4.798
                c76.667-20,145.737-77.567,163.532-111.797C490.488,182.738,503.576,98.174,446.57,41.168z&amp;quot;/&amp;gt;
        &amp;lt;/clipPath&amp;gt;
        
        &amp;lt;clipPath id=&amp;quot;stripGreen&amp;quot;&amp;gt;
            &amp;lt;path id=&amp;quot;green&amp;quot; d=&amp;quot;M72.603,317.736C71.87,316.727,74.997,320.537,72.603,317.736c-9.437-11.037-34.769-36.559-46.616-59.583
                c-26.257-51.028-38.794-129.458-7.6-189.644C38.157,30.357,72.942,6.779,118.972,0.328C122.661,0.096,126.004,0,129.237,0
                c51.637,0,111.506,26.183,122.377,145.724l0,0c-27.225-57.018-76.498-80.988-127.588-66.646
                c-27.492,7.715-51.651,35.282-63.729,67.576C42.154,195.165,42.749,259.684,72.603,317.736L72.603,317.736z&amp;quot;/&amp;gt;
        &amp;lt;/clipPath&amp;gt;
        
        &amp;lt;clipPath id=&amp;quot;stripBlue&amp;quot;&amp;gt;
            &amp;lt;path id=&amp;quot;blue&amp;quot; d=&amp;quot;M239.213,444.16c-20.272,0-34.196-9.124-51.833-20.675c-3.391-2.22-6.932-4.544-10.712-6.925
                c-23.878-15.024-70.44-60.928-79.911-74.206c-29.36-41.149-52.701-155.486-23.961-195.538l6.773-9.452l0.78,11.605
                c2.91,43.398,13.082,63.153,31.555,99.008c25.842,50.167,83.813,112.732,136.458,123.587
                c58.789-2.132,108.227-19.724,179.925-72.458l0,0c-26.7,36.129-99.081,101.332-136.808,125.679
                C277.495,433.81,258.921,444.16,239.213,444.16z&amp;quot;/&amp;gt;
        &amp;lt;/clipPath&amp;gt;
    &amp;lt;/defs&amp;gt;

    &amp;lt;rect x=&amp;quot;-486&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;972&amp;quot; height=&amp;quot;400&amp;quot; clip-path=&amp;quot;url(#stripGold)&amp;quot; fill=&amp;quot;url(#gradGold)&amp;quot;&amp;gt;
        &amp;lt;animate attributeName=&amp;quot;x&amp;quot; attributeType=&amp;quot;XML&amp;quot; from=&amp;quot;-486&amp;quot; to=&amp;quot;243&amp;quot; begin=&amp;quot;2s&amp;quot; dur=&amp;quot;8s&amp;quot; calcMode=&amp;quot;paced&amp;quot; repeatCount=&amp;quot;indefinite&amp;quot; /&amp;gt;
    &amp;lt;/rect&amp;gt;

    &amp;lt;rect x=&amp;quot;-650&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;972&amp;quot; height=&amp;quot;400&amp;quot; clip-path=&amp;quot;url(#stripGreen)&amp;quot; fill=&amp;quot;url(#gradGreen)&amp;quot;&amp;gt;
        &amp;lt;animate attributeName=&amp;quot;x&amp;quot; attributeType=&amp;quot;XML&amp;quot; from=&amp;quot;-650&amp;quot; to=&amp;quot;0&amp;quot; dur=&amp;quot;8s&amp;quot; begin=&amp;quot;0s&amp;quot; calcMode=&amp;quot;paced&amp;quot; repeatCount=&amp;quot;indefinite&amp;quot; /&amp;gt;
    &amp;lt;/rect&amp;gt;
    
    &amp;lt;rect x=&amp;quot;-540&amp;quot; y=&amp;quot;100&amp;quot; width=&amp;quot;972&amp;quot; height=&amp;quot;400&amp;quot; clip-path=&amp;quot;url(#stripBlue)&amp;quot; fill=&amp;quot;url(#gradBlue)&amp;quot;&amp;gt;
        &amp;lt;animate id=&amp;quot;animaRectBlue&amp;quot; attributeName=&amp;quot;x&amp;quot; attributeType=&amp;quot;XML&amp;quot; from=&amp;quot;-540&amp;quot; to=&amp;quot;50&amp;quot; begin=&amp;quot;1s&amp;quot; dur=&amp;quot;8s&amp;quot; calcMode=&amp;quot;paced&amp;quot; repeatCount=&amp;quot;indefinite&amp;quot; /&amp;gt;
    &amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sun, 04 May 2014 00:00:00 -0400</pubDate>
        <link>http://jasonsavage.github.io/blog/svg-animation-with-clip-path-and-linear-gradients.html</link>
        <guid isPermaLink="true">http://jasonsavage.github.io/blog/svg-animation-with-clip-path-and-linear-gradients.html</guid>
        
        
      </item>
    
  </channel>
</rss>
